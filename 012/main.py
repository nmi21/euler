"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?


----
Method:
- we know a handful of things:
    - a triangle number Tn -- 1 + 2 + 3 + ... + n -- is the same as a Gaussian summation Σn
    - Σn = 1 + 2 + 3 + ... + n = n(n+1)/2
    - therefore, we can easily calculate the value for any Tn by using n(n+1)/2
- note the following:
    - n(n+1)/2 == (2^-1) * n * (n+1)
    - one of n or n+1 must be even, and the other must be odd
    - thus, only one of n or n+1 can have a factor of 2
    - thus, we will always be able to account for the 2^-1 factor
    - a number can be prime factorized in the following way:
        - x = p1^a * p2^b * ... * px^i
    - and then the total number of factors can be determined by the following formula:
        - Π(i-1) = (a-1) * (b-1) * ... * (i-1)
- therefore, we can solve in the following way:
    - prime factorize n and n+1
    - determine if factors for n or n+1 have 2 in them and then subtract 1 from the factorization that does
    - calculate total factors for Tn
    - if total factors > 500, exit and report n; else loop through to next value of n, noting that you can shift n+1
    data to become n data

"""

from math import sqrt

PRIMES = [2, 3]


# prime checker
def is_prime(n):
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(sqrt(n)), 2):
        if n % i == 0:
            return False
    return True


# function that will add a prime to PRIMES when called
def add_prime():
    # initialize search at the last prime + 2
    # we know it cannot be + 1 because PRIMES is prepopulated with the only two adjacent primes: 2 and 3
    n = PRIMES[-1] + 2
    while not is_prime(n):
        n += 2
    PRIMES.append(n)


# function that returns the prime factorization for a number n, factors are same index as prime value
def prime_factorization(n):
    # make sure you are checking against all primes
    while PRIMES[-1] < n:
        add_prime()

    prime_factors = []
    for prime in PRIMES:
        count = 0
        while n % prime == 0:
            count += 1
            n = int(n / prime)
        prime_factors.append(count)

    return prime_factors


# function that will determine the total number of factors given two inputs and what we know about Tn
def num_factors(n_0_factors, n_1_factors):
    # multiply 2^-1 by the factor that includes 2
    if n_0_factors[0] > 0:
        n_0_factors[0] -= 1
    elif n_1_factors[0] > 0:
        n_1_factors[0] -= 1

    prod = 1
    for factor in n_0_factors:
        prod *= (factor + 1)
    for factor in n_1_factors:
        prod *= (factor + 1)

    return prod


# TODO write a triangle number solver
def triangle_num(n):
    return int(n * (n+1) / 2)


n_0 = 1
n_1 = n_0 + 1
n_0_factors = prime_factorization(n_0)
n_1_factors = prime_factorization(n_1)
while num_factors(n_0_factors, n_1_factors) < 500:
    n_0 = n_1
    n_1 += 1
    n_0_factors = n_1_factors
    n_1_factors = prime_factorization(n_1)

ans = triangle_num(n_0)
print(f"ans == {ans}")

