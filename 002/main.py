"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the
first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
even-valued terms.

----

Method:
- make a list of fibonacci numbers < 4M and add them up, but we can make it more efficient

- note that only every third element is even. This can be reasoned by the following:
    - assume F(n) is even and F(n-1) is odd
    - F(n-1) + F(n) = odd + even = odd = F(n+1)
    - F(n) + F(n+1) = even + odd = odd = F(n+2)
    - F(n+1) + F(n+2) = odd + odd = even = F(n+3)

- now if we only want to calculate the evens we can note the following:
    F(n) = F(n-1) + F(n-2)
    F(n) = [F(n-2) + F(n-3)] + F(n-2)
    F(n) = 2*F(n-2) + F(n-3)
    F(n) = 2*[F(n-3) + F(n-4)] + F(n-3)
    F(n) = 3*F(n-3) + 2*F(n-4)
    F(n) = 3*F(n-3) + F(n-4) + F(n-4)
    F(n) = 3*F(n-3) + F(n-4) + [F(n-5) + F(n-6)]
    F(n) = 3*F(n-3) + [F(n-4) + F(n-5)] + F(n-6)
    F(n) = 3*F(n-3) + [F(n-3)] + F(n-6)
    F(n) = 4*F(n-3) + F(n-6)

So now we can use this to calculate only even Fibonacci numbers
"""

limit = 4000000

fn_3 = 8
fn_6 = 2

fn = 4*fn_3 + fn_6
fib_sum = fn_3 + fn_6
while fn < limit:
    fib_sum += fn
    fn_6 = fn_3
    fn_3 = fn
    fn = 4*fn_3 + fn_6

ans = fib_sum
print(f"ans == {ans}")





